
        object "plonk_verifier" {
            code {
                function allocate(size) -> ptr {
                    ptr := mload(0x40)
                    if eq(ptr, 0) { ptr := 0x60 }
                    mstore(0x40, add(ptr, size))
                }
                let size := datasize("Runtime")
                let offset := allocate(size)
                datacopy(offset, dataoffset("Runtime"), size)
                return(offset, size)
            }
            object "Runtime" {
                code {
                    let success:bool := true
                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
                    function validate_ec_point(x, y) -> valid:bool {
                        {
                            let x_lt_p:bool := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let y_lt_p:bool := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            valid := and(x_lt_p, y_lt_p)
                        }
                        {
                            let x_is_zero:bool := eq(x, 0)
                            let y_is_zero:bool := eq(y, 0)
                            let x_or_y_is_zero:bool := or(x_is_zero, y_is_zero)
                            let x_and_y_is_not_zero:bool := not(x_or_y_is_zero)
                            valid := and(x_and_y_is_not_zero, valid)
                        }
                        {
                            let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let y_square_eq_x_cube_plus_3:bool := eq(x_cube_plus_3, y_square)
                            valid := and(y_square_eq_x_cube_plus_3, valid)
                        }
                    }
                    mstore(0x20, mod(calldataload(0x0), f_q))
mstore(0x40, mod(calldataload(0x20), f_q))
mstore(0x60, mod(calldataload(0x40), f_q))
mstore(0x0, 20107622970160369147918658341518908709857403650817009112909456777278838726211)

        {
            let x := calldataload(0x60)
            mstore(0x80, x)
            let y := calldataload(0x80)
            mstore(0xa0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0xa0)
            mstore(0xc0, x)
            let y := calldataload(0xc0)
            mstore(0xe0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0xe0)
            mstore(0x100, x)
            let y := calldataload(0x100)
            mstore(0x120, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x120)
            mstore(0x140, x)
            let y := calldataload(0x140)
            mstore(0x160, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x160)
            mstore(0x180, x)
            let y := calldataload(0x180)
            mstore(0x1a0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x1c0, keccak256(0x0, 448))
{
            let hash := mload(0x1c0)
            mstore(0x1e0, mod(hash, f_q))
            mstore(0x200, hash)
        }
mstore8(544, 1)
mstore(0x220, keccak256(0x200, 33))
{
            let hash := mload(0x220)
            mstore(0x240, mod(hash, f_q))
            mstore(0x260, hash)
        }
mstore8(640, 1)
mstore(0x280, keccak256(0x260, 33))
{
            let hash := mload(0x280)
            mstore(0x2a0, mod(hash, f_q))
            mstore(0x2c0, hash)
        }

        {
            let x := calldataload(0x1a0)
            mstore(0x2e0, x)
            let y := calldataload(0x1c0)
            mstore(0x300, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x1e0)
            mstore(0x320, x)
            let y := calldataload(0x200)
            mstore(0x340, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x220)
            mstore(0x360, x)
            let y := calldataload(0x240)
            mstore(0x380, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x260)
            mstore(0x3a0, x)
            let y := calldataload(0x280)
            mstore(0x3c0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x3e0, keccak256(0x2c0, 288))
{
            let hash := mload(0x3e0)
            mstore(0x400, mod(hash, f_q))
            mstore(0x420, hash)
        }

        {
            let x := calldataload(0x2a0)
            mstore(0x440, x)
            let y := calldataload(0x2c0)
            mstore(0x460, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x2e0)
            mstore(0x480, x)
            let y := calldataload(0x300)
            mstore(0x4a0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x320)
            mstore(0x4c0, x)
            let y := calldataload(0x340)
            mstore(0x4e0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x360)
            mstore(0x500, x)
            let y := calldataload(0x380)
            mstore(0x520, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x3a0)
            mstore(0x540, x)
            let y := calldataload(0x3c0)
            mstore(0x560, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x580, keccak256(0x420, 352))
{
            let hash := mload(0x580)
            mstore(0x5a0, mod(hash, f_q))
            mstore(0x5c0, hash)
        }
mstore(0x5e0, mod(calldataload(0x3e0), f_q))
mstore(0x600, mod(calldataload(0x400), f_q))
mstore(0x620, mod(calldataload(0x420), f_q))
mstore(0x640, mod(calldataload(0x440), f_q))
mstore(0x660, mod(calldataload(0x460), f_q))
mstore(0x680, mod(calldataload(0x480), f_q))
mstore(0x6a0, mod(calldataload(0x4a0), f_q))
mstore(0x6c0, mod(calldataload(0x4c0), f_q))
mstore(0x6e0, mod(calldataload(0x4e0), f_q))
mstore(0x700, mod(calldataload(0x500), f_q))
mstore(0x720, mod(calldataload(0x520), f_q))
mstore(0x740, mod(calldataload(0x540), f_q))
mstore(0x760, mod(calldataload(0x560), f_q))
mstore(0x780, mod(calldataload(0x580), f_q))
mstore(0x7a0, mod(calldataload(0x5a0), f_q))
mstore(0x7c0, mod(calldataload(0x5c0), f_q))
mstore(0x7e0, mod(calldataload(0x5e0), f_q))
mstore(0x800, mod(calldataload(0x600), f_q))
mstore(0x820, mod(calldataload(0x620), f_q))
mstore(0x840, mod(calldataload(0x640), f_q))
mstore(0x860, mod(calldataload(0x660), f_q))
mstore(0x880, mod(calldataload(0x680), f_q))
mstore(0x8a0, mod(calldataload(0x6a0), f_q))
mstore(0x8c0, mod(calldataload(0x6c0), f_q))
mstore(0x8e0, mod(calldataload(0x6e0), f_q))
mstore(0x900, mod(calldataload(0x700), f_q))
mstore(0x920, mod(calldataload(0x720), f_q))
mstore(0x940, mod(calldataload(0x740), f_q))
mstore(0x960, mod(calldataload(0x760), f_q))
mstore(0x980, mod(calldataload(0x780), f_q))
mstore(0x9a0, mod(calldataload(0x7a0), f_q))
mstore(0x9c0, mod(calldataload(0x7c0), f_q))
mstore(0x9e0, mod(calldataload(0x7e0), f_q))
mstore(0xa00, mod(calldataload(0x800), f_q))
mstore(0xa20, mod(calldataload(0x820), f_q))
mstore(0xa40, mod(calldataload(0x840), f_q))
mstore(0xa60, mod(calldataload(0x860), f_q))
mstore(0xa80, mod(calldataload(0x880), f_q))
mstore(0xaa0, mod(calldataload(0x8a0), f_q))
mstore(0xac0, mod(calldataload(0x8c0), f_q))
mstore(0xae0, mod(calldataload(0x8e0), f_q))
mstore(0xb00, mod(calldataload(0x900), f_q))
mstore(0xb20, keccak256(0x5c0, 1376))
{
            let hash := mload(0xb20)
            mstore(0xb40, mod(hash, f_q))
            mstore(0xb60, hash)
        }
mstore8(2944, 1)
mstore(0xb80, keccak256(0xb60, 33))
{
            let hash := mload(0xb80)
            mstore(0xba0, mod(hash, f_q))
            mstore(0xbc0, hash)
        }

        {
            let x := calldataload(0x920)
            mstore(0xbe0, x)
            let y := calldataload(0x940)
            mstore(0xc00, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0xc20, keccak256(0xbc0, 96))
{
            let hash := mload(0xc20)
            mstore(0xc40, mod(hash, f_q))
            mstore(0xc60, hash)
        }

        {
            let x := calldataload(0x960)
            mstore(0xc80, x)
            let y := calldataload(0x980)
            mstore(0xca0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0xcc0, mulmod(mload(0x5a0), mload(0x5a0), f_q))
mstore(0xce0, mulmod(mload(0xcc0), mload(0xcc0), f_q))
mstore(0xd00, mulmod(mload(0xce0), mload(0xce0), f_q))
mstore(0xd20, mulmod(mload(0xd00), mload(0xd00), f_q))
mstore(0xd40, mulmod(mload(0xd20), mload(0xd20), f_q))
mstore(0xd60, mulmod(mload(0xd40), mload(0xd40), f_q))
mstore(0xd80, mulmod(mload(0xd60), mload(0xd60), f_q))
mstore(0xda0, mulmod(mload(0xd80), mload(0xd80), f_q))
mstore(0xdc0, addmod(mload(0xda0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0xde0, mulmod(mload(0xdc0), 21802741923121153053409505722814863857733722351976909209543133076471996743681, f_q))
mstore(0xe00, mulmod(mload(0xde0), 10167250710514084151592399827148084713285735496006016499965216114801401041468, f_q))
mstore(0xe20, addmod(mload(0x5a0), 11720992161325191070654005918109190375262628904410017843732988071774407454149, f_q))
mstore(0xe40, mulmod(mload(0xde0), 15620430616972136973029697708057142747056669543503469918700292712864029815878, f_q))
mstore(0xe60, addmod(mload(0x5a0), 6267812254867138249216708037200132341491694856912564424997911473711778679739, f_q))
mstore(0xe80, mulmod(mload(0xde0), 4658854783519236281304787251426829785380272013053939496434657852755686889074, f_q))
mstore(0xea0, addmod(mload(0x5a0), 17229388088320038940941618493830445303168092387362094847263546333820121606543, f_q))
mstore(0xec0, mulmod(mload(0xde0), 11423757818648818765461327411617109120243501240676889555478397529313037714234, f_q))
mstore(0xee0, addmod(mload(0x5a0), 10464485053190456456785078333640165968304863159739144788219806657262770781383, f_q))
mstore(0xf00, mulmod(mload(0xde0), 13677048343952077794467995888380402608453928821079198134318291065290235358859, f_q))
mstore(0xf20, addmod(mload(0x5a0), 8211194527887197427778409856876872480094435579336836209379913121285573136758, f_q))
mstore(0xf40, mulmod(mload(0xde0), 14158528901797138466244491986759313854666262535363044392173788062030301470987, f_q))
mstore(0xf60, addmod(mload(0x5a0), 7729713970042136756001913758497961233882101865052989951524416124545507024630, f_q))
mstore(0xf80, mulmod(mload(0xde0), 1, f_q))
mstore(0xfa0, addmod(mload(0x5a0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0xfc0, mulmod(mload(0xde0), 7393649265675507591155086225434297871937368251641985215568891852805958167681, f_q))
mstore(0xfe0, addmod(mload(0x5a0), 14494593606163767631091319519822977216610996148774049128129312333769850327936, f_q))
mstore(0x1000, mulmod(mload(0xde0), 18154240498369470423574571952998640420834620155273666494480695920805672807787, f_q))
mstore(0x1020, addmod(mload(0x5a0), 3734002373469804798671833792258634667713744245142367849217508265770135687830, f_q))
{
            let prod := mload(0xe20)

                prod := mulmod(mload(0xe60), prod, f_q)
                mstore(0x1040, prod)
            
                prod := mulmod(mload(0xea0), prod, f_q)
                mstore(0x1060, prod)
            
                prod := mulmod(mload(0xee0), prod, f_q)
                mstore(0x1080, prod)
            
                prod := mulmod(mload(0xf20), prod, f_q)
                mstore(0x10a0, prod)
            
                prod := mulmod(mload(0xf60), prod, f_q)
                mstore(0x10c0, prod)
            
                prod := mulmod(mload(0xfa0), prod, f_q)
                mstore(0x10e0, prod)
            
                prod := mulmod(mload(0xfe0), prod, f_q)
                mstore(0x1100, prod)
            
                prod := mulmod(mload(0x1020), prod, f_q)
                mstore(0x1120, prod)
            
                prod := mulmod(mload(0xdc0), prod, f_q)
                mstore(0x1140, prod)
            
        }
mstore(0x1180, 32)
mstore(0x11a0, 32)
mstore(0x11c0, 32)
mstore(0x11e0, mload(0x1140))
mstore(0x1200, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x1220, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x1180, 0xc0, 0x1160, 0x20), 1), success)
{
            
            let inv := mload(0x1160)
            let v
        
                    v := mload(0xdc0)
                    mstore(3520, mulmod(mload(0x1120), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1020)
                    mstore(4128, mulmod(mload(0x1100), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xfe0)
                    mstore(4064, mulmod(mload(0x10e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xfa0)
                    mstore(4000, mulmod(mload(0x10c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xf60)
                    mstore(3936, mulmod(mload(0x10a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xf20)
                    mstore(3872, mulmod(mload(0x1080), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xee0)
                    mstore(3808, mulmod(mload(0x1060), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xea0)
                    mstore(3744, mulmod(mload(0x1040), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xe60)
                    mstore(3680, mulmod(mload(0xe20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0xe20, inv)

        }
mstore(0x1240, mulmod(mload(0xe00), mload(0xe20), f_q))
mstore(0x1260, mulmod(mload(0xe40), mload(0xe60), f_q))
mstore(0x1280, mulmod(mload(0xe80), mload(0xea0), f_q))
mstore(0x12a0, mulmod(mload(0xec0), mload(0xee0), f_q))
mstore(0x12c0, mulmod(mload(0xf00), mload(0xf20), f_q))
mstore(0x12e0, mulmod(mload(0xf40), mload(0xf60), f_q))
mstore(0x1300, mulmod(mload(0xf80), mload(0xfa0), f_q))
mstore(0x1320, mulmod(mload(0xfc0), mload(0xfe0), f_q))
mstore(0x1340, mulmod(mload(0x1000), mload(0x1020), f_q))
{
            let result := mulmod(mload(0x1300), mload(0x20), f_q)
result := addmod(mulmod(mload(0x1320), mload(0x40), f_q), result, f_q)
result := addmod(mulmod(mload(0x1340), mload(0x60), f_q), result, f_q)
mstore(4960, result)
        }
mstore(0x1380, addmod(mload(0x600), mload(0x740), f_q))
mstore(0x13a0, mulmod(mload(0x1380), mload(0x1380), f_q))
mstore(0x13c0, mulmod(mload(0x13a0), mload(0x13a0), f_q))
mstore(0x13e0, mulmod(mload(0x1380), mload(0x13c0), f_q))
mstore(0x1400, mulmod(mload(0x13e0), 7511745149465107256748700652201246547602992235352608707588321460060273774987, f_q))
mstore(0x1420, addmod(mload(0x620), mload(0x7c0), f_q))
mstore(0x1440, mulmod(mload(0x1420), mload(0x1420), f_q))
mstore(0x1460, mulmod(mload(0x1440), mload(0x1440), f_q))
mstore(0x1480, mulmod(mload(0x1420), mload(0x1460), f_q))
mstore(0x14a0, mulmod(mload(0x1480), 10370080108974718697676803824769673834027675643658433702224577712625900127200, f_q))
mstore(0x14c0, addmod(mload(0x1400), mload(0x14a0), f_q))
mstore(0x14e0, addmod(mload(0x640), mload(0x7e0), f_q))
mstore(0x1500, mulmod(mload(0x14e0), mload(0x14e0), f_q))
mstore(0x1520, mulmod(mload(0x1500), mload(0x1500), f_q))
mstore(0x1540, mulmod(mload(0x14e0), mload(0x1520), f_q))
mstore(0x1560, mulmod(mload(0x1540), 19705173408229649878903981084052839426532978878058043055305024233888854471533, f_q))
mstore(0x1580, addmod(mload(0x14c0), mload(0x1560), f_q))
mstore(0x15a0, addmod(mload(0x1580), sub(f_q, mload(0x680)), f_q))
mstore(0x15c0, mulmod(mload(0x15a0), mload(0x800), f_q))
mstore(0x15e0, mulmod(mload(0x400), mload(0x15c0), f_q))
mstore(0x1600, mulmod(mload(0x13e0), 18732019378264290557468133440468564866454307626475683536618613112504878618481, f_q))
mstore(0x1620, mulmod(mload(0x1480), 20870176810702568768751421378473869562658540583882454726129544628203806653987, f_q))
mstore(0x1640, addmod(mload(0x1600), mload(0x1620), f_q))
mstore(0x1660, mulmod(mload(0x1540), 7266061498423634438633389053804536045105766754026813321943009179476902321146, f_q))
mstore(0x1680, addmod(mload(0x1640), mload(0x1660), f_q))
mstore(0x16a0, addmod(mload(0x1680), sub(f_q, mload(0x6a0)), f_q))
mstore(0x16c0, mulmod(mload(0x16a0), mload(0x800), f_q))
mstore(0x16e0, addmod(mload(0x15e0), mload(0x16c0), f_q))
mstore(0x1700, mulmod(mload(0x400), mload(0x16e0), f_q))
mstore(0x1720, mulmod(mload(0x13e0), 9131299761947733513298312097611845208338517739621853568979632113419485819303, f_q))
mstore(0x1740, mulmod(mload(0x1480), 10595341252162738537912664445405114076324478519622938027420701542910180337937, f_q))
mstore(0x1760, addmod(mload(0x1720), mload(0x1740), f_q))
mstore(0x1780, mulmod(mload(0x1540), 11597556804922396090267472882856054602429588299176362916247939723151043581408, f_q))
mstore(0x17a0, addmod(mload(0x1760), mload(0x1780), f_q))
mstore(0x17c0, addmod(mload(0x17a0), sub(f_q, mload(0x6c0)), f_q))
mstore(0x17e0, mulmod(mload(0x17c0), mload(0x800), f_q))
mstore(0x1800, addmod(mload(0x1700), mload(0x17e0), f_q))
mstore(0x1820, mulmod(mload(0x400), mload(0x1800), f_q))
mstore(0x1840, addmod(mload(0x13e0), sub(f_q, mload(0x5e0)), f_q))
mstore(0x1860, mulmod(mload(0x1840), mload(0x820), f_q))
mstore(0x1880, addmod(mload(0x1820), mload(0x1860), f_q))
mstore(0x18a0, mulmod(mload(0x400), mload(0x1880), f_q))
mstore(0x18c0, mulmod(mload(0x5e0), 7511745149465107256748700652201246547602992235352608707588321460060273774987, f_q))
mstore(0x18e0, mulmod(mload(0x1420), 10370080108974718697676803824769673834027675643658433702224577712625900127200, f_q))
mstore(0x1900, addmod(mload(0x18c0), mload(0x18e0), f_q))
mstore(0x1920, mulmod(mload(0x14e0), 19705173408229649878903981084052839426532978878058043055305024233888854471533, f_q))
mstore(0x1940, addmod(mload(0x1900), mload(0x1920), f_q))
mstore(0x1960, addmod(mload(0x1940), mload(0x760), f_q))
mstore(0x1980, mulmod(mload(0x1960), mload(0x1960), f_q))
mstore(0x19a0, mulmod(mload(0x1980), mload(0x1980), f_q))
mstore(0x19c0, mulmod(mload(0x1960), mload(0x19a0), f_q))
mstore(0x19e0, mulmod(mload(0x680), 14581990407185373640425896461718924180109794780799188900903678642755512839974, f_q))
mstore(0x1a00, mulmod(mload(0x6a0), 18866968878651837536281064213261914109651535895144158735451177080294903852066, f_q))
mstore(0x1a20, addmod(mload(0x19e0), mload(0x1a00), f_q))
mstore(0x1a40, mulmod(mload(0x6c0), 7839627026775837327267018712780335784833794955194428770232963186824469625450, f_q))
mstore(0x1a60, addmod(mload(0x1a20), mload(0x1a40), f_q))
mstore(0x1a80, addmod(mload(0x19c0), sub(f_q, mload(0x1a60)), f_q))
mstore(0x1aa0, mulmod(mload(0x1a80), mload(0x820), f_q))
mstore(0x1ac0, addmod(mload(0x18a0), mload(0x1aa0), f_q))
mstore(0x1ae0, mulmod(mload(0x400), mload(0x1ac0), f_q))
mstore(0x1b00, mulmod(mload(0x5e0), 18732019378264290557468133440468564866454307626475683536618613112504878618481, f_q))
mstore(0x1b20, mulmod(mload(0x1420), 20870176810702568768751421378473869562658540583882454726129544628203806653987, f_q))
mstore(0x1b40, addmod(mload(0x1b00), mload(0x1b20), f_q))
mstore(0x1b60, mulmod(mload(0x14e0), 7266061498423634438633389053804536045105766754026813321943009179476902321146, f_q))
mstore(0x1b80, addmod(mload(0x1b40), mload(0x1b60), f_q))
mstore(0x1ba0, addmod(mload(0x1b80), mload(0x780), f_q))
mstore(0x1bc0, mulmod(mload(0x680), 18938579070830856475783700955955783311402730090941909099413093949983854639956, f_q))
mstore(0x1be0, mulmod(mload(0x6a0), 8613994242085266665256493323589366394657716111166474713216639394202078033993, f_q))
mstore(0x1c00, addmod(mload(0x1bc0), mload(0x1be0), f_q))
mstore(0x1c20, mulmod(mload(0x6c0), 5498488707276883206944027953979269171532592088279065622083714982398440150521, f_q))
mstore(0x1c40, addmod(mload(0x1c00), mload(0x1c20), f_q))
mstore(0x1c60, addmod(mload(0x1ba0), sub(f_q, mload(0x1c40)), f_q))
mstore(0x1c80, mulmod(mload(0x1c60), mload(0x820), f_q))
mstore(0x1ca0, addmod(mload(0x1ae0), mload(0x1c80), f_q))
mstore(0x1cc0, mulmod(mload(0x400), mload(0x1ca0), f_q))
mstore(0x1ce0, mulmod(mload(0x5e0), 9131299761947733513298312097611845208338517739621853568979632113419485819303, f_q))
mstore(0x1d00, mulmod(mload(0x1420), 10595341252162738537912664445405114076324478519622938027420701542910180337937, f_q))
mstore(0x1d20, addmod(mload(0x1ce0), mload(0x1d00), f_q))
mstore(0x1d40, mulmod(mload(0x14e0), 11597556804922396090267472882856054602429588299176362916247939723151043581408, f_q))
mstore(0x1d60, addmod(mload(0x1d20), mload(0x1d40), f_q))
mstore(0x1d80, addmod(mload(0x1d60), mload(0x7a0), f_q))
mstore(0x1da0, mulmod(mload(0x680), 655752878747070013666604006434797489161341466456915955415098407670323222025, f_q))
mstore(0x1dc0, mulmod(mload(0x6a0), 4856172836225950379592127603074379105027349156448153533703883389233432728400, f_q))
mstore(0x1de0, addmod(mload(0x1da0), mload(0x1dc0), f_q))
mstore(0x1e00, mulmod(mload(0x6c0), 10503264605839191981081969978629584646259107387222177725485772749763096823552, f_q))
mstore(0x1e20, addmod(mload(0x1de0), mload(0x1e00), f_q))
mstore(0x1e40, addmod(mload(0x1d80), sub(f_q, mload(0x1e20)), f_q))
mstore(0x1e60, mulmod(mload(0x1e40), mload(0x820), f_q))
mstore(0x1e80, addmod(mload(0x1cc0), mload(0x1e60), f_q))
mstore(0x1ea0, mulmod(mload(0x400), mload(0x1e80), f_q))
mstore(0x1ec0, addmod(mload(0x18e0), mload(0x1920), f_q))
mstore(0x1ee0, addmod(mload(0x1400), mload(0x1ec0), f_q))
mstore(0x1f00, addmod(mload(0x1ee0), sub(f_q, mload(0x680)), f_q))
mstore(0x1f20, mulmod(mload(0x1f00), mload(0x840), f_q))
mstore(0x1f40, addmod(mload(0x1ea0), mload(0x1f20), f_q))
mstore(0x1f60, mulmod(mload(0x400), mload(0x1f40), f_q))
mstore(0x1f80, addmod(mload(0x1b20), mload(0x1b60), f_q))
mstore(0x1fa0, addmod(mload(0x1600), mload(0x1f80), f_q))
mstore(0x1fc0, addmod(mload(0x1fa0), sub(f_q, mload(0x6a0)), f_q))
mstore(0x1fe0, mulmod(mload(0x1fc0), mload(0x840), f_q))
mstore(0x2000, addmod(mload(0x1f60), mload(0x1fe0), f_q))
mstore(0x2020, mulmod(mload(0x400), mload(0x2000), f_q))
mstore(0x2040, addmod(mload(0x1d00), mload(0x1d40), f_q))
mstore(0x2060, addmod(mload(0x1720), mload(0x2040), f_q))
mstore(0x2080, addmod(mload(0x2060), sub(f_q, mload(0x6c0)), f_q))
mstore(0x20a0, mulmod(mload(0x2080), mload(0x840), f_q))
mstore(0x20c0, addmod(mload(0x2020), mload(0x20a0), f_q))
mstore(0x20e0, mulmod(mload(0x400), mload(0x20c0), f_q))
mstore(0x2100, addmod(mload(0x700), mload(0x600), f_q))
mstore(0x2120, addmod(mload(0x2100), sub(f_q, mload(0x680)), f_q))
mstore(0x2140, mulmod(mload(0x2120), mload(0x860), f_q))
mstore(0x2160, addmod(mload(0x20e0), mload(0x2140), f_q))
mstore(0x2180, mulmod(mload(0x400), mload(0x2160), f_q))
mstore(0x21a0, addmod(mload(0x720), mload(0x620), f_q))
mstore(0x21c0, addmod(mload(0x21a0), sub(f_q, mload(0x6a0)), f_q))
mstore(0x21e0, mulmod(mload(0x21c0), mload(0x860), f_q))
mstore(0x2200, addmod(mload(0x2180), mload(0x21e0), f_q))
mstore(0x2220, mulmod(mload(0x400), mload(0x2200), f_q))
mstore(0x2240, addmod(mload(0x6e0), sub(f_q, mload(0x6c0)), f_q))
mstore(0x2260, mulmod(mload(0x2240), mload(0x860), f_q))
mstore(0x2280, addmod(mload(0x2220), mload(0x2260), f_q))
mstore(0x22a0, mulmod(mload(0x400), mload(0x2280), f_q))
mstore(0x22c0, mulmod(mload(0x600), mload(0x660), f_q))
mstore(0x22e0, addmod(1, sub(f_q, mload(0x660)), f_q))
mstore(0x2300, mulmod(mload(0x5e0), mload(0x22e0), f_q))
mstore(0x2320, addmod(mload(0x22c0), mload(0x2300), f_q))
mstore(0x2340, addmod(mload(0x620), sub(f_q, mload(0x2320)), f_q))
mstore(0x2360, mulmod(mload(0x2340), mload(0x880), f_q))
mstore(0x2380, addmod(mload(0x22a0), mload(0x2360), f_q))
mstore(0x23a0, mulmod(mload(0x400), mload(0x2380), f_q))
mstore(0x23c0, mulmod(mload(0x5e0), mload(0x660), f_q))
mstore(0x23e0, mulmod(mload(0x600), mload(0x22e0), f_q))
mstore(0x2400, addmod(mload(0x23c0), mload(0x23e0), f_q))
mstore(0x2420, addmod(mload(0x640), sub(f_q, mload(0x2400)), f_q))
mstore(0x2440, mulmod(mload(0x2420), mload(0x880), f_q))
mstore(0x2460, addmod(mload(0x23a0), mload(0x2440), f_q))
mstore(0x2480, mulmod(mload(0x400), mload(0x2460), f_q))
mstore(0x24a0, mulmod(mload(0x22e0), mload(0x660), f_q))
mstore(0x24c0, mulmod(mload(0x24a0), mload(0x880), f_q))
mstore(0x24e0, addmod(mload(0x2480), mload(0x24c0), f_q))
mstore(0x2500, mulmod(mload(0x400), mload(0x24e0), f_q))
mstore(0x2520, addmod(mload(0x5e0), 21888242871839275222246405745257275088548364400416034343698204186575808495617, f_q))
mstore(0x2540, mulmod(mload(0x2520), mload(0x8a0), f_q))
mstore(0x2560, mulmod(mload(0x600), mload(0x2520), f_q))
mstore(0x2580, addmod(1, sub(f_q, mload(0x2560)), f_q))
mstore(0x25a0, mulmod(mload(0x2580), mload(0x2540), f_q))
mstore(0x25c0, addmod(mload(0x2500), mload(0x25a0), f_q))
mstore(0x25e0, mulmod(mload(0x400), mload(0x25c0), f_q))
mstore(0x2600, addmod(mload(0x620), sub(f_q, mload(0x2580)), f_q))
mstore(0x2620, mulmod(mload(0x2600), mload(0x8a0), f_q))
mstore(0x2640, addmod(mload(0x25e0), mload(0x2620), f_q))
mstore(0x2660, mulmod(mload(0x400), mload(0x2640), f_q))
mstore(0x2680, addmod(1, sub(f_q, mload(0xa20)), f_q))
mstore(0x26a0, mulmod(mload(0x2680), mload(0x1300), f_q))
mstore(0x26c0, addmod(mload(0x2660), mload(0x26a0), f_q))
mstore(0x26e0, mulmod(mload(0x400), mload(0x26c0), f_q))
mstore(0x2700, mulmod(mload(0xae0), mload(0xae0), f_q))
mstore(0x2720, addmod(mload(0x2700), sub(f_q, mload(0xae0)), f_q))
mstore(0x2740, mulmod(mload(0x2720), mload(0x1240), f_q))
mstore(0x2760, addmod(mload(0x26e0), mload(0x2740), f_q))
mstore(0x2780, mulmod(mload(0x400), mload(0x2760), f_q))
mstore(0x27a0, addmod(mload(0xa80), sub(f_q, mload(0xa60)), f_q))
mstore(0x27c0, mulmod(mload(0x27a0), mload(0x1300), f_q))
mstore(0x27e0, addmod(mload(0x2780), mload(0x27c0), f_q))
mstore(0x2800, mulmod(mload(0x400), mload(0x27e0), f_q))
mstore(0x2820, addmod(mload(0xae0), sub(f_q, mload(0xac0)), f_q))
mstore(0x2840, mulmod(mload(0x2820), mload(0x1300), f_q))
mstore(0x2860, addmod(mload(0x2800), mload(0x2840), f_q))
mstore(0x2880, mulmod(mload(0x400), mload(0x2860), f_q))
mstore(0x28a0, addmod(1, sub(f_q, mload(0x1240)), f_q))
mstore(0x28c0, addmod(mload(0x1260), mload(0x1280), f_q))
mstore(0x28e0, addmod(mload(0x28c0), mload(0x12a0), f_q))
mstore(0x2900, addmod(mload(0x28e0), mload(0x12c0), f_q))
mstore(0x2920, addmod(mload(0x2900), mload(0x12e0), f_q))
mstore(0x2940, addmod(mload(0x28a0), sub(f_q, mload(0x2920)), f_q))
mstore(0x2960, mulmod(mload(0x8e0), mload(0x240), f_q))
mstore(0x2980, addmod(mload(0x1360), mload(0x2960), f_q))
mstore(0x29a0, addmod(mload(0x2980), mload(0x2a0), f_q))
mstore(0x29c0, mulmod(mload(0x900), mload(0x240), f_q))
mstore(0x29e0, addmod(mload(0x5e0), mload(0x29c0), f_q))
mstore(0x2a00, addmod(mload(0x29e0), mload(0x2a0), f_q))
mstore(0x2a20, mulmod(mload(0x2a00), mload(0x29a0), f_q))
mstore(0x2a40, mulmod(mload(0x920), mload(0x240), f_q))
mstore(0x2a60, addmod(mload(0x600), mload(0x2a40), f_q))
mstore(0x2a80, addmod(mload(0x2a60), mload(0x2a0), f_q))
mstore(0x2aa0, mulmod(mload(0x2a80), mload(0x2a20), f_q))
mstore(0x2ac0, mulmod(mload(0x940), mload(0x240), f_q))
mstore(0x2ae0, addmod(mload(0x620), mload(0x2ac0), f_q))
mstore(0x2b00, addmod(mload(0x2ae0), mload(0x2a0), f_q))
mstore(0x2b20, mulmod(mload(0x2b00), mload(0x2aa0), f_q))
mstore(0x2b40, mulmod(mload(0x2b20), mload(0xa40), f_q))
mstore(0x2b60, mulmod(1, mload(0x240), f_q))
mstore(0x2b80, mulmod(mload(0x5a0), mload(0x2b60), f_q))
mstore(0x2ba0, addmod(mload(0x1360), mload(0x2b80), f_q))
mstore(0x2bc0, addmod(mload(0x2ba0), mload(0x2a0), f_q))
mstore(0x2be0, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x240), f_q))
mstore(0x2c00, mulmod(mload(0x5a0), mload(0x2be0), f_q))
mstore(0x2c20, addmod(mload(0x5e0), mload(0x2c00), f_q))
mstore(0x2c40, addmod(mload(0x2c20), mload(0x2a0), f_q))
mstore(0x2c60, mulmod(mload(0x2c40), mload(0x2bc0), f_q))
mstore(0x2c80, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x240), f_q))
mstore(0x2ca0, mulmod(mload(0x5a0), mload(0x2c80), f_q))
mstore(0x2cc0, addmod(mload(0x600), mload(0x2ca0), f_q))
mstore(0x2ce0, addmod(mload(0x2cc0), mload(0x2a0), f_q))
mstore(0x2d00, mulmod(mload(0x2ce0), mload(0x2c60), f_q))
mstore(0x2d20, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0x240), f_q))
mstore(0x2d40, mulmod(mload(0x5a0), mload(0x2d20), f_q))
mstore(0x2d60, addmod(mload(0x620), mload(0x2d40), f_q))
mstore(0x2d80, addmod(mload(0x2d60), mload(0x2a0), f_q))
mstore(0x2da0, mulmod(mload(0x2d80), mload(0x2d00), f_q))
mstore(0x2dc0, mulmod(mload(0x2da0), mload(0xa20), f_q))
mstore(0x2de0, addmod(mload(0x2b40), sub(f_q, mload(0x2dc0)), f_q))
mstore(0x2e00, mulmod(mload(0x2de0), mload(0x2940), f_q))
mstore(0x2e20, addmod(mload(0x2880), mload(0x2e00), f_q))
mstore(0x2e40, mulmod(mload(0x400), mload(0x2e20), f_q))
mstore(0x2e60, mulmod(mload(0x960), mload(0x240), f_q))
mstore(0x2e80, addmod(mload(0x640), mload(0x2e60), f_q))
mstore(0x2ea0, addmod(mload(0x2e80), mload(0x2a0), f_q))
mstore(0x2ec0, mulmod(mload(0x980), mload(0x240), f_q))
mstore(0x2ee0, addmod(mload(0x660), mload(0x2ec0), f_q))
mstore(0x2f00, addmod(mload(0x2ee0), mload(0x2a0), f_q))
mstore(0x2f20, mulmod(mload(0x2f00), mload(0x2ea0), f_q))
mstore(0x2f40, mulmod(mload(0x9a0), mload(0x240), f_q))
mstore(0x2f60, addmod(mload(0x740), mload(0x2f40), f_q))
mstore(0x2f80, addmod(mload(0x2f60), mload(0x2a0), f_q))
mstore(0x2fa0, mulmod(mload(0x2f80), mload(0x2f20), f_q))
mstore(0x2fc0, mulmod(mload(0x9c0), mload(0x240), f_q))
mstore(0x2fe0, addmod(mload(0x760), mload(0x2fc0), f_q))
mstore(0x3000, addmod(mload(0x2fe0), mload(0x2a0), f_q))
mstore(0x3020, mulmod(mload(0x3000), mload(0x2fa0), f_q))
mstore(0x3040, mulmod(mload(0x3020), mload(0xaa0), f_q))
mstore(0x3060, mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(0x240), f_q))
mstore(0x3080, mulmod(mload(0x5a0), mload(0x3060), f_q))
mstore(0x30a0, addmod(mload(0x640), mload(0x3080), f_q))
mstore(0x30c0, addmod(mload(0x30a0), mload(0x2a0), f_q))
mstore(0x30e0, mulmod(21134065618345176623193549882539580312263652408302468683943992798037078993309, mload(0x240), f_q))
mstore(0x3100, mulmod(mload(0x5a0), mload(0x30e0), f_q))
mstore(0x3120, addmod(mload(0x660), mload(0x3100), f_q))
mstore(0x3140, addmod(mload(0x3120), mload(0x2a0), f_q))
mstore(0x3160, mulmod(mload(0x3140), mload(0x30c0), f_q))
mstore(0x3180, mulmod(5625741653535312224677218588085279924365897425605943700675464992185016992283, mload(0x240), f_q))
mstore(0x31a0, mulmod(mload(0x5a0), mload(0x3180), f_q))
mstore(0x31c0, addmod(mload(0x740), mload(0x31a0), f_q))
mstore(0x31e0, addmod(mload(0x31c0), mload(0x2a0), f_q))
mstore(0x3200, mulmod(mload(0x31e0), mload(0x3160), f_q))
mstore(0x3220, mulmod(14704729814417906439424896605881467874595262020190401576785074330126828718155, mload(0x240), f_q))
mstore(0x3240, mulmod(mload(0x5a0), mload(0x3220), f_q))
mstore(0x3260, addmod(mload(0x760), mload(0x3240), f_q))
mstore(0x3280, addmod(mload(0x3260), mload(0x2a0), f_q))
mstore(0x32a0, mulmod(mload(0x3280), mload(0x3200), f_q))
mstore(0x32c0, mulmod(mload(0x32a0), mload(0xa80), f_q))
mstore(0x32e0, addmod(mload(0x3040), sub(f_q, mload(0x32c0)), f_q))
mstore(0x3300, mulmod(mload(0x32e0), mload(0x2940), f_q))
mstore(0x3320, addmod(mload(0x2e40), mload(0x3300), f_q))
mstore(0x3340, mulmod(mload(0x400), mload(0x3320), f_q))
mstore(0x3360, mulmod(mload(0x9e0), mload(0x240), f_q))
mstore(0x3380, addmod(mload(0x780), mload(0x3360), f_q))
mstore(0x33a0, addmod(mload(0x3380), mload(0x2a0), f_q))
mstore(0x33c0, mulmod(mload(0xa00), mload(0x240), f_q))
mstore(0x33e0, addmod(mload(0x7a0), mload(0x33c0), f_q))
mstore(0x3400, addmod(mload(0x33e0), mload(0x2a0), f_q))
mstore(0x3420, mulmod(mload(0x3400), mload(0x33a0), f_q))
mstore(0x3440, mulmod(mload(0x3420), mload(0xb00), f_q))
mstore(0x3460, mulmod(8343274462013750416000956870576256937330525306073862550863787263304548803879, mload(0x240), f_q))
mstore(0x3480, mulmod(mload(0x5a0), mload(0x3460), f_q))
mstore(0x34a0, addmod(mload(0x780), mload(0x3480), f_q))
mstore(0x34c0, addmod(mload(0x34a0), mload(0x2a0), f_q))
mstore(0x34e0, mulmod(20928372310071051017340352686640453451620397549739756658327314209761852842004, mload(0x240), f_q))
mstore(0x3500, mulmod(mload(0x5a0), mload(0x34e0), f_q))
mstore(0x3520, addmod(mload(0x7a0), mload(0x3500), f_q))
mstore(0x3540, addmod(mload(0x3520), mload(0x2a0), f_q))
mstore(0x3560, mulmod(mload(0x3540), mload(0x34c0), f_q))
mstore(0x3580, mulmod(mload(0x3560), mload(0xae0), f_q))
mstore(0x35a0, addmod(mload(0x3440), sub(f_q, mload(0x3580)), f_q))
mstore(0x35c0, mulmod(mload(0x35a0), mload(0x2940), f_q))
mstore(0x35e0, addmod(mload(0x3340), mload(0x35c0), f_q))
mstore(0x3600, mulmod(mload(0xda0), mload(0xda0), f_q))
mstore(0x3620, mulmod(mload(0x3600), mload(0xda0), f_q))
mstore(0x3640, mulmod(mload(0x3620), mload(0xda0), f_q))
mstore(0x3660, mulmod(mload(0x3640), mload(0xda0), f_q))
mstore(0x3680, mulmod(1, mload(0xda0), f_q))
mstore(0x36a0, mulmod(1, mload(0x3600), f_q))
mstore(0x36c0, mulmod(1, mload(0x3620), f_q))
mstore(0x36e0, mulmod(1, mload(0x3640), f_q))
mstore(0x3700, mulmod(mload(0x35e0), mload(0xdc0), f_q))
mstore(0x3720, mulmod(mload(0x5a0), 1, f_q))
mstore(0x3740, addmod(mload(0xc40), sub(f_q, mload(0x3720)), f_q))
mstore(0x3760, mulmod(mload(0x5a0), 7393649265675507591155086225434297871937368251641985215568891852805958167681, f_q))
mstore(0x3780, addmod(mload(0xc40), sub(f_q, mload(0x3760)), f_q))
mstore(0x37a0, mulmod(mload(0x5a0), 10167250710514084151592399827148084713285735496006016499965216114801401041468, f_q))
mstore(0x37c0, addmod(mload(0xc40), sub(f_q, mload(0x37a0)), f_q))
mstore(0x37e0, mulmod(mload(0x5a0), 14158528901797138466244491986759313854666262535363044392173788062030301470987, f_q))
mstore(0x3800, addmod(mload(0xc40), sub(f_q, mload(0x37e0)), f_q))
{
            let result := mulmod(mload(0xc40), 1, f_q)
result := addmod(mulmod(mload(0x5a0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q), result, f_q)
mstore(14368, result)
        }
mstore(0x3840, mulmod(1, mload(0x3740), f_q))
{
            let result := mulmod(mload(0xc40), 336064704366629164846827533063663361944733613411004735955524271739548856951, f_q)
result := addmod(mulmod(mload(0x5a0), 21552178167472646057399578212193611726603630787005029607742679914836259638666, f_q), result, f_q)
mstore(14432, result)
        }
{
            let result := mulmod(mload(0xc40), 3030877262651826076417571969066381315015150038578691327387387943454207615475, f_q)
result := addmod(mulmod(mload(0x5a0), 14391901014454789459162553807845746888032227144654257069993329772708615854226, f_q), result, f_q)
mstore(14464, result)
        }
{
            let result := mulmod(mload(0xc40), 6912168707830446919378590127055386625725034537358138957713394856065892055552, f_q)
result := addmod(mulmod(mload(0x5a0), 16411819427100397495251160463522607342876690115765352971013681598007499115611, f_q), result, f_q)
mstore(14496, result)
        }
mstore(0x38c0, mulmod(mload(0x3840), mload(0x3780), f_q))
mstore(0x38e0, mulmod(mload(0x38c0), mload(0x3800), f_q))
{
            let result := mulmod(mload(0xc40), 19947773512621820452528617400732035250381930196271502546864388931832479102347, f_q)
result := addmod(mulmod(mload(0x5a0), 1940469359217454769717788344525239838166434204144531796833815254743329393270, f_q), result, f_q)
mstore(14592, result)
        }
{
            let result := mulmod(mload(0xc40), 5307411326235910010982187846655284515126317856134227860176727469937085865696, f_q)
result := addmod(mulmod(mload(0x5a0), 17924918787165656398528962871038411142966825762978775775857007246370123255359, f_q), result, f_q)
mstore(14624, result)
        }
{
            let result := mulmod(mload(0xc40), 2868352760655725740670530120331463788036206322158892420596360852137805089611, f_q)
result := addmod(mulmod(mload(0x5a0), 10564729777571317642127391059634284919194202867615836652533661042770582751185, f_q), result, f_q)
mstore(14656, result)
        }
mstore(0x3960, mulmod(mload(0x38c0), mload(0x37c0), f_q))
{
            let result := mulmod(mload(0xc40), 14494593606163767631091319519822977216610996148774049128129312333769850327937, f_q)
result := addmod(mulmod(mload(0x5a0), 7393649265675507591155086225434297871937368251641985215568891852805958167680, f_q), result, f_q)
mstore(14720, result)
        }
{
            let result := mulmod(mload(0xc40), 7393649265675507591155086225434297871937368251641985215568891852805958167680, f_q)
result := addmod(mulmod(mload(0x5a0), 11127651639145312389826920017692932539651112496784353064786400118576093855511, f_q), result, f_q)
mstore(14752, result)
        }
{
            let prod := mload(0x3820)

                prod := mulmod(mload(0x3860), prod, f_q)
                mstore(0x39c0, prod)
            
                prod := mulmod(mload(0x3880), prod, f_q)
                mstore(0x39e0, prod)
            
                prod := mulmod(mload(0x38a0), prod, f_q)
                mstore(0x3a00, prod)
            
                prod := mulmod(mload(0x38e0), prod, f_q)
                mstore(0x3a20, prod)
            
                prod := mulmod(mload(0x3900), prod, f_q)
                mstore(0x3a40, prod)
            
                prod := mulmod(mload(0x3920), prod, f_q)
                mstore(0x3a60, prod)
            
                prod := mulmod(mload(0x3940), prod, f_q)
                mstore(0x3a80, prod)
            
                prod := mulmod(mload(0x3960), prod, f_q)
                mstore(0x3aa0, prod)
            
                prod := mulmod(mload(0x3980), prod, f_q)
                mstore(0x3ac0, prod)
            
                prod := mulmod(mload(0x39a0), prod, f_q)
                mstore(0x3ae0, prod)
            
                prod := mulmod(mload(0x38c0), prod, f_q)
                mstore(0x3b00, prod)
            
        }
mstore(0x3b40, 32)
mstore(0x3b60, 32)
mstore(0x3b80, 32)
mstore(0x3ba0, mload(0x3b00))
mstore(0x3bc0, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x3be0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x3b40, 0xc0, 0x3b20, 0x20), 1), success)
{
            
            let inv := mload(0x3b20)
            let v
        
                    v := mload(0x38c0)
                    mstore(14528, mulmod(mload(0x3ae0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x39a0)
                    mstore(14752, mulmod(mload(0x3ac0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3980)
                    mstore(14720, mulmod(mload(0x3aa0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3960)
                    mstore(14688, mulmod(mload(0x3a80), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3940)
                    mstore(14656, mulmod(mload(0x3a60), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3920)
                    mstore(14624, mulmod(mload(0x3a40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3900)
                    mstore(14592, mulmod(mload(0x3a20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x38e0)
                    mstore(14560, mulmod(mload(0x3a00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x38a0)
                    mstore(14496, mulmod(mload(0x39e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3880)
                    mstore(14464, mulmod(mload(0x39c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3860)
                    mstore(14432, mulmod(mload(0x3820), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x3820, inv)

        }
{
            let result := mload(0x3820)
mstore(15360, result)
        }
mstore(0x3c20, mulmod(mload(0x3840), mload(0x38e0), f_q))
{
            let result := mload(0x3860)
result := addmod(mload(0x3880), result, f_q)
result := addmod(mload(0x38a0), result, f_q)
mstore(15424, result)
        }
mstore(0x3c60, mulmod(mload(0x3840), mload(0x3960), f_q))
{
            let result := mload(0x3900)
result := addmod(mload(0x3920), result, f_q)
result := addmod(mload(0x3940), result, f_q)
mstore(15488, result)
        }
mstore(0x3ca0, mulmod(mload(0x3840), mload(0x38c0), f_q))
{
            let result := mload(0x3980)
result := addmod(mload(0x39a0), result, f_q)
mstore(15552, result)
        }
{
            let prod := mload(0x3c00)

                prod := mulmod(mload(0x3c40), prod, f_q)
                mstore(0x3ce0, prod)
            
                prod := mulmod(mload(0x3c80), prod, f_q)
                mstore(0x3d00, prod)
            
                prod := mulmod(mload(0x3cc0), prod, f_q)
                mstore(0x3d20, prod)
            
        }
mstore(0x3d60, 32)
mstore(0x3d80, 32)
mstore(0x3da0, 32)
mstore(0x3dc0, mload(0x3d20))
mstore(0x3de0, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x3e00, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x3d60, 0xc0, 0x3d40, 0x20), 1), success)
{
            
            let inv := mload(0x3d40)
            let v
        
                    v := mload(0x3cc0)
                    mstore(15552, mulmod(mload(0x3d00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3c80)
                    mstore(15488, mulmod(mload(0x3ce0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3c40)
                    mstore(15424, mulmod(mload(0x3c00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x3c00, inv)

        }
mstore(0x3e20, mulmod(mload(0x3c20), mload(0x3c40), f_q))
mstore(0x3e40, mulmod(mload(0x3c60), mload(0x3c80), f_q))
mstore(0x3e60, mulmod(mload(0x3ca0), mload(0x3cc0), f_q))
mstore(0x3e80, mulmod(mload(0xb40), mload(0xb40), f_q))
mstore(0x3ea0, mulmod(mload(0x3e80), mload(0xb40), f_q))
mstore(0x3ec0, mulmod(mload(0x3ea0), mload(0xb40), f_q))
mstore(0x3ee0, mulmod(mload(0x3ec0), mload(0xb40), f_q))
mstore(0x3f00, mulmod(mload(0x3ee0), mload(0xb40), f_q))
mstore(0x3f20, mulmod(mload(0x3f00), mload(0xb40), f_q))
mstore(0x3f40, mulmod(mload(0x3f20), mload(0xb40), f_q))
mstore(0x3f60, mulmod(mload(0x3f40), mload(0xb40), f_q))
mstore(0x3f80, mulmod(mload(0x3f60), mload(0xb40), f_q))
mstore(0x3fa0, mulmod(mload(0x3f80), mload(0xb40), f_q))
mstore(0x3fc0, mulmod(mload(0x3fa0), mload(0xb40), f_q))
mstore(0x3fe0, mulmod(mload(0x3fc0), mload(0xb40), f_q))
mstore(0x4000, mulmod(mload(0x3fe0), mload(0xb40), f_q))
mstore(0x4020, mulmod(mload(0x4000), mload(0xb40), f_q))
mstore(0x4040, mulmod(mload(0x4020), mload(0xb40), f_q))
mstore(0x4060, mulmod(mload(0x4040), mload(0xb40), f_q))
mstore(0x4080, mulmod(mload(0x4060), mload(0xb40), f_q))
mstore(0x40a0, mulmod(mload(0x4080), mload(0xb40), f_q))
mstore(0x40c0, mulmod(mload(0x40a0), mload(0xb40), f_q))
mstore(0x40e0, mulmod(mload(0x40c0), mload(0xb40), f_q))
mstore(0x4100, mulmod(mload(0x40e0), mload(0xb40), f_q))
mstore(0x4120, mulmod(mload(0x4100), mload(0xb40), f_q))
mstore(0x4140, mulmod(mload(0x4120), mload(0xb40), f_q))
mstore(0x4160, mulmod(mload(0x4140), mload(0xb40), f_q))
mstore(0x4180, mulmod(mload(0x4160), mload(0xb40), f_q))
mstore(0x41a0, mulmod(mload(0xba0), mload(0xba0), f_q))
mstore(0x41c0, mulmod(mload(0x41a0), mload(0xba0), f_q))
mstore(0x41e0, mulmod(mload(0x41c0), mload(0xba0), f_q))
{
            let result := mulmod(mload(0x5e0), mload(0x3820), f_q)
mstore(16896, result)
        }
mstore(0x4220, mulmod(mload(0x4200), mload(0x3c00), f_q))
mstore(0x4240, mulmod(sub(f_q, mload(0x4220)), 1, f_q))
{
            let result := mulmod(mload(0x660), mload(0x3820), f_q)
mstore(16992, result)
        }
mstore(0x4280, mulmod(mload(0x4260), mload(0x3c00), f_q))
mstore(0x42a0, mulmod(sub(f_q, mload(0x4280)), mload(0xb40), f_q))
mstore(0x42c0, mulmod(1, mload(0xb40), f_q))
mstore(0x42e0, addmod(mload(0x4240), mload(0x42a0), f_q))
{
            let result := mulmod(mload(0x740), mload(0x3820), f_q)
mstore(17152, result)
        }
mstore(0x4320, mulmod(mload(0x4300), mload(0x3c00), f_q))
mstore(0x4340, mulmod(sub(f_q, mload(0x4320)), mload(0x3e80), f_q))
mstore(0x4360, mulmod(1, mload(0x3e80), f_q))
mstore(0x4380, addmod(mload(0x42e0), mload(0x4340), f_q))
{
            let result := mulmod(mload(0x760), mload(0x3820), f_q)
mstore(17312, result)
        }
mstore(0x43c0, mulmod(mload(0x43a0), mload(0x3c00), f_q))
mstore(0x43e0, mulmod(sub(f_q, mload(0x43c0)), mload(0x3ea0), f_q))
mstore(0x4400, mulmod(1, mload(0x3ea0), f_q))
mstore(0x4420, addmod(mload(0x4380), mload(0x43e0), f_q))
{
            let result := mulmod(mload(0x780), mload(0x3820), f_q)
mstore(17472, result)
        }
mstore(0x4460, mulmod(mload(0x4440), mload(0x3c00), f_q))
mstore(0x4480, mulmod(sub(f_q, mload(0x4460)), mload(0x3ec0), f_q))
mstore(0x44a0, mulmod(1, mload(0x3ec0), f_q))
mstore(0x44c0, addmod(mload(0x4420), mload(0x4480), f_q))
{
            let result := mulmod(mload(0x7a0), mload(0x3820), f_q)
mstore(17632, result)
        }
mstore(0x4500, mulmod(mload(0x44e0), mload(0x3c00), f_q))
mstore(0x4520, mulmod(sub(f_q, mload(0x4500)), mload(0x3ee0), f_q))
mstore(0x4540, mulmod(1, mload(0x3ee0), f_q))
mstore(0x4560, addmod(mload(0x44c0), mload(0x4520), f_q))
{
            let result := mulmod(mload(0x7c0), mload(0x3820), f_q)
mstore(17792, result)
        }
mstore(0x45a0, mulmod(mload(0x4580), mload(0x3c00), f_q))
mstore(0x45c0, mulmod(sub(f_q, mload(0x45a0)), mload(0x3f00), f_q))
mstore(0x45e0, mulmod(1, mload(0x3f00), f_q))
mstore(0x4600, addmod(mload(0x4560), mload(0x45c0), f_q))
{
            let result := mulmod(mload(0x7e0), mload(0x3820), f_q)
mstore(17952, result)
        }
mstore(0x4640, mulmod(mload(0x4620), mload(0x3c00), f_q))
mstore(0x4660, mulmod(sub(f_q, mload(0x4640)), mload(0x3f20), f_q))
mstore(0x4680, mulmod(1, mload(0x3f20), f_q))
mstore(0x46a0, addmod(mload(0x4600), mload(0x4660), f_q))
{
            let result := mulmod(mload(0x800), mload(0x3820), f_q)
mstore(18112, result)
        }
mstore(0x46e0, mulmod(mload(0x46c0), mload(0x3c00), f_q))
mstore(0x4700, mulmod(sub(f_q, mload(0x46e0)), mload(0x3f40), f_q))
mstore(0x4720, mulmod(1, mload(0x3f40), f_q))
mstore(0x4740, addmod(mload(0x46a0), mload(0x4700), f_q))
{
            let result := mulmod(mload(0x820), mload(0x3820), f_q)
mstore(18272, result)
        }
mstore(0x4780, mulmod(mload(0x4760), mload(0x3c00), f_q))
mstore(0x47a0, mulmod(sub(f_q, mload(0x4780)), mload(0x3f60), f_q))
mstore(0x47c0, mulmod(1, mload(0x3f60), f_q))
mstore(0x47e0, addmod(mload(0x4740), mload(0x47a0), f_q))
{
            let result := mulmod(mload(0x840), mload(0x3820), f_q)
mstore(18432, result)
        }
mstore(0x4820, mulmod(mload(0x4800), mload(0x3c00), f_q))
mstore(0x4840, mulmod(sub(f_q, mload(0x4820)), mload(0x3f80), f_q))
mstore(0x4860, mulmod(1, mload(0x3f80), f_q))
mstore(0x4880, addmod(mload(0x47e0), mload(0x4840), f_q))
{
            let result := mulmod(mload(0x860), mload(0x3820), f_q)
mstore(18592, result)
        }
mstore(0x48c0, mulmod(mload(0x48a0), mload(0x3c00), f_q))
mstore(0x48e0, mulmod(sub(f_q, mload(0x48c0)), mload(0x3fa0), f_q))
mstore(0x4900, mulmod(1, mload(0x3fa0), f_q))
mstore(0x4920, addmod(mload(0x4880), mload(0x48e0), f_q))
{
            let result := mulmod(mload(0x880), mload(0x3820), f_q)
mstore(18752, result)
        }
mstore(0x4960, mulmod(mload(0x4940), mload(0x3c00), f_q))
mstore(0x4980, mulmod(sub(f_q, mload(0x4960)), mload(0x3fc0), f_q))
mstore(0x49a0, mulmod(1, mload(0x3fc0), f_q))
mstore(0x49c0, addmod(mload(0x4920), mload(0x4980), f_q))
{
            let result := mulmod(mload(0x8a0), mload(0x3820), f_q)
mstore(18912, result)
        }
mstore(0x4a00, mulmod(mload(0x49e0), mload(0x3c00), f_q))
mstore(0x4a20, mulmod(sub(f_q, mload(0x4a00)), mload(0x3fe0), f_q))
mstore(0x4a40, mulmod(1, mload(0x3fe0), f_q))
mstore(0x4a60, addmod(mload(0x49c0), mload(0x4a20), f_q))
{
            let result := mulmod(mload(0x8e0), mload(0x3820), f_q)
mstore(19072, result)
        }
mstore(0x4aa0, mulmod(mload(0x4a80), mload(0x3c00), f_q))
mstore(0x4ac0, mulmod(sub(f_q, mload(0x4aa0)), mload(0x4000), f_q))
mstore(0x4ae0, mulmod(1, mload(0x4000), f_q))
mstore(0x4b00, addmod(mload(0x4a60), mload(0x4ac0), f_q))
{
            let result := mulmod(mload(0x900), mload(0x3820), f_q)
mstore(19232, result)
        }
mstore(0x4b40, mulmod(mload(0x4b20), mload(0x3c00), f_q))
mstore(0x4b60, mulmod(sub(f_q, mload(0x4b40)), mload(0x4020), f_q))
mstore(0x4b80, mulmod(1, mload(0x4020), f_q))
mstore(0x4ba0, addmod(mload(0x4b00), mload(0x4b60), f_q))
{
            let result := mulmod(mload(0x920), mload(0x3820), f_q)
mstore(19392, result)
        }
mstore(0x4be0, mulmod(mload(0x4bc0), mload(0x3c00), f_q))
mstore(0x4c00, mulmod(sub(f_q, mload(0x4be0)), mload(0x4040), f_q))
mstore(0x4c20, mulmod(1, mload(0x4040), f_q))
mstore(0x4c40, addmod(mload(0x4ba0), mload(0x4c00), f_q))
{
            let result := mulmod(mload(0x940), mload(0x3820), f_q)
mstore(19552, result)
        }
mstore(0x4c80, mulmod(mload(0x4c60), mload(0x3c00), f_q))
mstore(0x4ca0, mulmod(sub(f_q, mload(0x4c80)), mload(0x4060), f_q))
mstore(0x4cc0, mulmod(1, mload(0x4060), f_q))
mstore(0x4ce0, addmod(mload(0x4c40), mload(0x4ca0), f_q))
{
            let result := mulmod(mload(0x960), mload(0x3820), f_q)
mstore(19712, result)
        }
mstore(0x4d20, mulmod(mload(0x4d00), mload(0x3c00), f_q))
mstore(0x4d40, mulmod(sub(f_q, mload(0x4d20)), mload(0x4080), f_q))
mstore(0x4d60, mulmod(1, mload(0x4080), f_q))
mstore(0x4d80, addmod(mload(0x4ce0), mload(0x4d40), f_q))
{
            let result := mulmod(mload(0x980), mload(0x3820), f_q)
mstore(19872, result)
        }
mstore(0x4dc0, mulmod(mload(0x4da0), mload(0x3c00), f_q))
mstore(0x4de0, mulmod(sub(f_q, mload(0x4dc0)), mload(0x40a0), f_q))
mstore(0x4e00, mulmod(1, mload(0x40a0), f_q))
mstore(0x4e20, addmod(mload(0x4d80), mload(0x4de0), f_q))
{
            let result := mulmod(mload(0x9a0), mload(0x3820), f_q)
mstore(20032, result)
        }
mstore(0x4e60, mulmod(mload(0x4e40), mload(0x3c00), f_q))
mstore(0x4e80, mulmod(sub(f_q, mload(0x4e60)), mload(0x40c0), f_q))
mstore(0x4ea0, mulmod(1, mload(0x40c0), f_q))
mstore(0x4ec0, addmod(mload(0x4e20), mload(0x4e80), f_q))
{
            let result := mulmod(mload(0x9c0), mload(0x3820), f_q)
mstore(20192, result)
        }
mstore(0x4f00, mulmod(mload(0x4ee0), mload(0x3c00), f_q))
mstore(0x4f20, mulmod(sub(f_q, mload(0x4f00)), mload(0x40e0), f_q))
mstore(0x4f40, mulmod(1, mload(0x40e0), f_q))
mstore(0x4f60, addmod(mload(0x4ec0), mload(0x4f20), f_q))
{
            let result := mulmod(mload(0x9e0), mload(0x3820), f_q)
mstore(20352, result)
        }
mstore(0x4fa0, mulmod(mload(0x4f80), mload(0x3c00), f_q))
mstore(0x4fc0, mulmod(sub(f_q, mload(0x4fa0)), mload(0x4100), f_q))
mstore(0x4fe0, mulmod(1, mload(0x4100), f_q))
mstore(0x5000, addmod(mload(0x4f60), mload(0x4fc0), f_q))
{
            let result := mulmod(mload(0xa00), mload(0x3820), f_q)
mstore(20512, result)
        }
mstore(0x5040, mulmod(mload(0x5020), mload(0x3c00), f_q))
mstore(0x5060, mulmod(sub(f_q, mload(0x5040)), mload(0x4120), f_q))
mstore(0x5080, mulmod(1, mload(0x4120), f_q))
mstore(0x50a0, addmod(mload(0x5000), mload(0x5060), f_q))
{
            let result := mulmod(mload(0x3700), mload(0x3820), f_q)
mstore(20672, result)
        }
mstore(0x50e0, mulmod(mload(0x50c0), mload(0x3c00), f_q))
mstore(0x5100, mulmod(sub(f_q, mload(0x50e0)), mload(0x4140), f_q))
mstore(0x5120, mulmod(1, mload(0x4140), f_q))
mstore(0x5140, mulmod(mload(0x3680), mload(0x4140), f_q))
mstore(0x5160, mulmod(mload(0x36a0), mload(0x4140), f_q))
mstore(0x5180, mulmod(mload(0x36c0), mload(0x4140), f_q))
mstore(0x51a0, mulmod(mload(0x36e0), mload(0x4140), f_q))
mstore(0x51c0, addmod(mload(0x50a0), mload(0x5100), f_q))
{
            let result := mulmod(mload(0x8c0), mload(0x3820), f_q)
mstore(20960, result)
        }
mstore(0x5200, mulmod(mload(0x51e0), mload(0x3c00), f_q))
mstore(0x5220, mulmod(sub(f_q, mload(0x5200)), mload(0x4160), f_q))
mstore(0x5240, mulmod(1, mload(0x4160), f_q))
mstore(0x5260, addmod(mload(0x51c0), mload(0x5220), f_q))
mstore(0x5280, mulmod(mload(0x5260), 1, f_q))
mstore(0x52a0, mulmod(mload(0x42c0), 1, f_q))
mstore(0x52c0, mulmod(mload(0x4360), 1, f_q))
mstore(0x52e0, mulmod(mload(0x4400), 1, f_q))
mstore(0x5300, mulmod(mload(0x44a0), 1, f_q))
mstore(0x5320, mulmod(mload(0x4540), 1, f_q))
mstore(0x5340, mulmod(mload(0x45e0), 1, f_q))
mstore(0x5360, mulmod(mload(0x4680), 1, f_q))
mstore(0x5380, mulmod(mload(0x4720), 1, f_q))
mstore(0x53a0, mulmod(mload(0x47c0), 1, f_q))
mstore(0x53c0, mulmod(mload(0x4860), 1, f_q))
mstore(0x53e0, mulmod(mload(0x4900), 1, f_q))
mstore(0x5400, mulmod(mload(0x49a0), 1, f_q))
mstore(0x5420, mulmod(mload(0x4a40), 1, f_q))
mstore(0x5440, mulmod(mload(0x4ae0), 1, f_q))
mstore(0x5460, mulmod(mload(0x4b80), 1, f_q))
mstore(0x5480, mulmod(mload(0x4c20), 1, f_q))
mstore(0x54a0, mulmod(mload(0x4cc0), 1, f_q))
mstore(0x54c0, mulmod(mload(0x4d60), 1, f_q))
mstore(0x54e0, mulmod(mload(0x4e00), 1, f_q))
mstore(0x5500, mulmod(mload(0x4ea0), 1, f_q))
mstore(0x5520, mulmod(mload(0x4f40), 1, f_q))
mstore(0x5540, mulmod(mload(0x4fe0), 1, f_q))
mstore(0x5560, mulmod(mload(0x5080), 1, f_q))
mstore(0x5580, mulmod(mload(0x5120), 1, f_q))
mstore(0x55a0, mulmod(mload(0x5140), 1, f_q))
mstore(0x55c0, mulmod(mload(0x5160), 1, f_q))
mstore(0x55e0, mulmod(mload(0x5180), 1, f_q))
mstore(0x5600, mulmod(mload(0x51a0), 1, f_q))
mstore(0x5620, mulmod(mload(0x5240), 1, f_q))
mstore(0x5640, mulmod(1, mload(0x3c20), f_q))
{
            let result := mulmod(mload(0x600), mload(0x3860), f_q)
result := addmod(mulmod(mload(0x680), mload(0x3880), f_q), result, f_q)
result := addmod(mulmod(mload(0x700), mload(0x38a0), f_q), result, f_q)
mstore(22112, result)
        }
mstore(0x5680, mulmod(mload(0x5660), mload(0x3e20), f_q))
mstore(0x56a0, mulmod(sub(f_q, mload(0x5680)), 1, f_q))
mstore(0x56c0, mulmod(mload(0x5640), 1, f_q))
{
            let result := mulmod(mload(0x620), mload(0x3860), f_q)
result := addmod(mulmod(mload(0x6a0), mload(0x3880), f_q), result, f_q)
result := addmod(mulmod(mload(0x720), mload(0x38a0), f_q), result, f_q)
mstore(22240, result)
        }
mstore(0x5700, mulmod(mload(0x56e0), mload(0x3e20), f_q))
mstore(0x5720, mulmod(sub(f_q, mload(0x5700)), mload(0xb40), f_q))
mstore(0x5740, mulmod(mload(0x5640), mload(0xb40), f_q))
mstore(0x5760, addmod(mload(0x56a0), mload(0x5720), f_q))
{
            let result := mulmod(mload(0x640), mload(0x3860), f_q)
result := addmod(mulmod(mload(0x6c0), mload(0x3880), f_q), result, f_q)
result := addmod(mulmod(mload(0x6e0), mload(0x38a0), f_q), result, f_q)
mstore(22400, result)
        }
mstore(0x57a0, mulmod(mload(0x5780), mload(0x3e20), f_q))
mstore(0x57c0, mulmod(sub(f_q, mload(0x57a0)), mload(0x3e80), f_q))
mstore(0x57e0, mulmod(mload(0x5640), mload(0x3e80), f_q))
mstore(0x5800, addmod(mload(0x5760), mload(0x57c0), f_q))
mstore(0x5820, mulmod(mload(0x5800), mload(0xba0), f_q))
mstore(0x5840, mulmod(mload(0x56c0), mload(0xba0), f_q))
mstore(0x5860, mulmod(mload(0x5740), mload(0xba0), f_q))
mstore(0x5880, mulmod(mload(0x57e0), mload(0xba0), f_q))
mstore(0x58a0, addmod(mload(0x5280), mload(0x5820), f_q))
mstore(0x58c0, mulmod(1, mload(0x3c60), f_q))
{
            let result := mulmod(mload(0xa20), mload(0x3900), f_q)
result := addmod(mulmod(mload(0xa40), mload(0x3920), f_q), result, f_q)
result := addmod(mulmod(mload(0xa60), mload(0x3940), f_q), result, f_q)
mstore(22752, result)
        }
mstore(0x5900, mulmod(mload(0x58e0), mload(0x3e40), f_q))
mstore(0x5920, mulmod(sub(f_q, mload(0x5900)), 1, f_q))
mstore(0x5940, mulmod(mload(0x58c0), 1, f_q))
{
            let result := mulmod(mload(0xa80), mload(0x3900), f_q)
result := addmod(mulmod(mload(0xaa0), mload(0x3920), f_q), result, f_q)
result := addmod(mulmod(mload(0xac0), mload(0x3940), f_q), result, f_q)
mstore(22880, result)
        }
mstore(0x5980, mulmod(mload(0x5960), mload(0x3e40), f_q))
mstore(0x59a0, mulmod(sub(f_q, mload(0x5980)), mload(0xb40), f_q))
mstore(0x59c0, mulmod(mload(0x58c0), mload(0xb40), f_q))
mstore(0x59e0, addmod(mload(0x5920), mload(0x59a0), f_q))
mstore(0x5a00, mulmod(mload(0x59e0), mload(0x41a0), f_q))
mstore(0x5a20, mulmod(mload(0x5940), mload(0x41a0), f_q))
mstore(0x5a40, mulmod(mload(0x59c0), mload(0x41a0), f_q))
mstore(0x5a60, addmod(mload(0x58a0), mload(0x5a00), f_q))
mstore(0x5a80, mulmod(1, mload(0x3ca0), f_q))
{
            let result := mulmod(mload(0xae0), mload(0x3980), f_q)
result := addmod(mulmod(mload(0xb00), mload(0x39a0), f_q), result, f_q)
mstore(23200, result)
        }
mstore(0x5ac0, mulmod(mload(0x5aa0), mload(0x3e60), f_q))
mstore(0x5ae0, mulmod(sub(f_q, mload(0x5ac0)), 1, f_q))
mstore(0x5b00, mulmod(mload(0x5a80), 1, f_q))
mstore(0x5b20, mulmod(mload(0x5ae0), mload(0x41c0), f_q))
mstore(0x5b40, mulmod(mload(0x5b00), mload(0x41c0), f_q))
mstore(0x5b60, addmod(mload(0x5a60), mload(0x5b20), f_q))
mstore(0x5b80, mulmod(1, mload(0x3840), f_q))
mstore(0x5ba0, mulmod(1, mload(0xc40), f_q))
mstore(0x5bc0, 0x0000000000000000000000000000000000000000000000000000000000000001)
                    mstore(0x5be0, 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(0x5c00, mload(0x5b60))
success := and(eq(staticcall(gas(), 0x7, 0x5bc0, 0x60, 0x5bc0, 0x40), 1), success)
mstore(0x5c20, mload(0x5bc0))
                    mstore(0x5c40, mload(0x5be0))
mstore(0x5c60, mload(0x80))
                    mstore(0x5c80, mload(0xa0))
success := and(eq(staticcall(gas(), 0x6, 0x5c20, 0x80, 0x5c20, 0x40), 1), success)
mstore(0x5ca0, mload(0x180))
                    mstore(0x5cc0, mload(0x1a0))
mstore(0x5ce0, mload(0x52a0))
success := and(eq(staticcall(gas(), 0x7, 0x5ca0, 0x60, 0x5ca0, 0x40), 1), success)
mstore(0x5d00, mload(0x5c20))
                    mstore(0x5d20, mload(0x5c40))
mstore(0x5d40, mload(0x5ca0))
                    mstore(0x5d60, mload(0x5cc0))
success := and(eq(staticcall(gas(), 0x6, 0x5d00, 0x80, 0x5d00, 0x40), 1), success)
mstore(0x5d80, 0x1070b546d316337679a8fd8ba9e5bdd338767065129affddfe2e393b541bbc21)
                    mstore(0x5da0, 0x26889fa8606a87db71ce7a7afd15b2fe97d9d156d7277c59eed4506757e4e794)
mstore(0x5dc0, mload(0x52c0))
success := and(eq(staticcall(gas(), 0x7, 0x5d80, 0x60, 0x5d80, 0x40), 1), success)
mstore(0x5de0, mload(0x5d00))
                    mstore(0x5e00, mload(0x5d20))
mstore(0x5e20, mload(0x5d80))
                    mstore(0x5e40, mload(0x5da0))
success := and(eq(staticcall(gas(), 0x6, 0x5de0, 0x80, 0x5de0, 0x40), 1), success)
mstore(0x5e60, 0x2cfba73d2e95e73892f2c0947d54b6593bd163e513d5240241b0acaed9f01809)
                    mstore(0x5e80, 0x0d3e5674dd78d3d3bd44c762e97ce18e9b3d4f9a38fe5e42956bd04acadf2497)
mstore(0x5ea0, mload(0x52e0))
success := and(eq(staticcall(gas(), 0x7, 0x5e60, 0x60, 0x5e60, 0x40), 1), success)
mstore(0x5ec0, mload(0x5de0))
                    mstore(0x5ee0, mload(0x5e00))
mstore(0x5f00, mload(0x5e60))
                    mstore(0x5f20, mload(0x5e80))
success := and(eq(staticcall(gas(), 0x6, 0x5ec0, 0x80, 0x5ec0, 0x40), 1), success)
mstore(0x5f40, 0x1059195a5280f87af576d612a90595a4b67513cab3db74e9703bef9f758ede90)
                    mstore(0x5f60, 0x24e851acda2841abbc85ea90c7e7904aded17886317495e212691d27fcf91d30)
mstore(0x5f80, mload(0x5300))
success := and(eq(staticcall(gas(), 0x7, 0x5f40, 0x60, 0x5f40, 0x40), 1), success)
mstore(0x5fa0, mload(0x5ec0))
                    mstore(0x5fc0, mload(0x5ee0))
mstore(0x5fe0, mload(0x5f40))
                    mstore(0x6000, mload(0x5f60))
success := and(eq(staticcall(gas(), 0x6, 0x5fa0, 0x80, 0x5fa0, 0x40), 1), success)
mstore(0x6020, 0x16365714138c5bee75fbb5d98bfb0fb454e878292969c1856d2149ccea18b332)
                    mstore(0x6040, 0x304d9d4199ce679308ac6bb22b517c7fa108a1f2ee2b3d3ae65387bb9591be24)
mstore(0x6060, mload(0x5320))
success := and(eq(staticcall(gas(), 0x7, 0x6020, 0x60, 0x6020, 0x40), 1), success)
mstore(0x6080, mload(0x5fa0))
                    mstore(0x60a0, mload(0x5fc0))
mstore(0x60c0, mload(0x6020))
                    mstore(0x60e0, mload(0x6040))
success := and(eq(staticcall(gas(), 0x6, 0x6080, 0x80, 0x6080, 0x40), 1), success)
mstore(0x6100, 0x084f4c4995b081528df74f3dc14437a101f24ebe22969f721fab48b5029c9b9f)
                    mstore(0x6120, 0x07dd2bcd881bda96175f3225beb06e65dba867b186e0aedb2dcc8fa19875af2a)
mstore(0x6140, mload(0x5340))
success := and(eq(staticcall(gas(), 0x7, 0x6100, 0x60, 0x6100, 0x40), 1), success)
mstore(0x6160, mload(0x6080))
                    mstore(0x6180, mload(0x60a0))
mstore(0x61a0, mload(0x6100))
                    mstore(0x61c0, mload(0x6120))
success := and(eq(staticcall(gas(), 0x6, 0x6160, 0x80, 0x6160, 0x40), 1), success)
mstore(0x61e0, 0x1867552ae096d25c07d68fa7e937093f52e780ae9685755d2f9c7422f5768a89)
                    mstore(0x6200, 0x1441985c483b7c6a60629a92dcc6ebd7bb8e595091a50181ec7e74aea2086903)
mstore(0x6220, mload(0x5360))
success := and(eq(staticcall(gas(), 0x7, 0x61e0, 0x60, 0x61e0, 0x40), 1), success)
mstore(0x6240, mload(0x6160))
                    mstore(0x6260, mload(0x6180))
mstore(0x6280, mload(0x61e0))
                    mstore(0x62a0, mload(0x6200))
success := and(eq(staticcall(gas(), 0x6, 0x6240, 0x80, 0x6240, 0x40), 1), success)
mstore(0x62c0, 0x2aaeeba7bd1fb7f3a78e52a7670fc69b436daf943dbcdc6af2b4a4704eadea25)
                    mstore(0x62e0, 0x1ae77ac2926486fb66efe8c5c5943d20d6fa4ab99c776b7aae6c03f62e428e3d)
mstore(0x6300, mload(0x5380))
success := and(eq(staticcall(gas(), 0x7, 0x62c0, 0x60, 0x62c0, 0x40), 1), success)
mstore(0x6320, mload(0x6240))
                    mstore(0x6340, mload(0x6260))
mstore(0x6360, mload(0x62c0))
                    mstore(0x6380, mload(0x62e0))
success := and(eq(staticcall(gas(), 0x6, 0x6320, 0x80, 0x6320, 0x40), 1), success)
mstore(0x63a0, 0x0f8c966c4e9ea940bda98927b2a9a8a425e245149e99e399ad0e72757202725c)
                    mstore(0x63c0, 0x0dc141e24bbdbe08045937a7a8e968766381cd16635c77e18cdf7dc9948dac08)
mstore(0x63e0, mload(0x53a0))
success := and(eq(staticcall(gas(), 0x7, 0x63a0, 0x60, 0x63a0, 0x40), 1), success)
mstore(0x6400, mload(0x6320))
                    mstore(0x6420, mload(0x6340))
mstore(0x6440, mload(0x63a0))
                    mstore(0x6460, mload(0x63c0))
success := and(eq(staticcall(gas(), 0x6, 0x6400, 0x80, 0x6400, 0x40), 1), success)
mstore(0x6480, 0x1a7f4b70992dce6a230b929368c4f3256d02274d76322154ec047c9d045c8fba)
                    mstore(0x64a0, 0x15db14ddabf429124e4a6bdbd21790313d090e9978d4f347b9a94f2f296c029e)
mstore(0x64c0, mload(0x53c0))
success := and(eq(staticcall(gas(), 0x7, 0x6480, 0x60, 0x6480, 0x40), 1), success)
mstore(0x64e0, mload(0x6400))
                    mstore(0x6500, mload(0x6420))
mstore(0x6520, mload(0x6480))
                    mstore(0x6540, mload(0x64a0))
success := and(eq(staticcall(gas(), 0x6, 0x64e0, 0x80, 0x64e0, 0x40), 1), success)
mstore(0x6560, 0x204eff0d1866846e6e9ac83b980aa24f2201ce8d7aac9053b170a661467ea351)
                    mstore(0x6580, 0x0062db454f807816648558dbe08d87dd0a4598d77de991332f687cc95d854216)
mstore(0x65a0, mload(0x53e0))
success := and(eq(staticcall(gas(), 0x7, 0x6560, 0x60, 0x6560, 0x40), 1), success)
mstore(0x65c0, mload(0x64e0))
                    mstore(0x65e0, mload(0x6500))
mstore(0x6600, mload(0x6560))
                    mstore(0x6620, mload(0x6580))
success := and(eq(staticcall(gas(), 0x6, 0x65c0, 0x80, 0x65c0, 0x40), 1), success)
mstore(0x6640, 0x2164ce3a5c1533a274129539555cb7ab913ff0aefd38b3bbad42dda0e89fd34b)
                    mstore(0x6660, 0x1e8506870b8a92cd54a5436e29258bcf75ff5b01238b99df1fc1cd34558269b8)
mstore(0x6680, mload(0x5400))
success := and(eq(staticcall(gas(), 0x7, 0x6640, 0x60, 0x6640, 0x40), 1), success)
mstore(0x66a0, mload(0x65c0))
                    mstore(0x66c0, mload(0x65e0))
mstore(0x66e0, mload(0x6640))
                    mstore(0x6700, mload(0x6660))
success := and(eq(staticcall(gas(), 0x6, 0x66a0, 0x80, 0x66a0, 0x40), 1), success)
mstore(0x6720, 0x2efc557a8dbde14355847f2dc7655d5fdb6a3834ccc0715a694ff78761358fc6)
                    mstore(0x6740, 0x11e395f1be7a58d6b4668377aa71d2012768b5a35e853b6c514055245653fcc6)
mstore(0x6760, mload(0x5420))
success := and(eq(staticcall(gas(), 0x7, 0x6720, 0x60, 0x6720, 0x40), 1), success)
mstore(0x6780, mload(0x66a0))
                    mstore(0x67a0, mload(0x66c0))
mstore(0x67c0, mload(0x6720))
                    mstore(0x67e0, mload(0x6740))
success := and(eq(staticcall(gas(), 0x6, 0x6780, 0x80, 0x6780, 0x40), 1), success)
mstore(0x6800, 0x10ad1b5f2c5e3d96ca86f094259f03bf03c4e6634246a1db231614879b10cacd)
                    mstore(0x6820, 0x12762e1eda998052570002d04467159d3013f5f958fc66466b13f60362124fd5)
mstore(0x6840, mload(0x5440))
success := and(eq(staticcall(gas(), 0x7, 0x6800, 0x60, 0x6800, 0x40), 1), success)
mstore(0x6860, mload(0x6780))
                    mstore(0x6880, mload(0x67a0))
mstore(0x68a0, mload(0x6800))
                    mstore(0x68c0, mload(0x6820))
success := and(eq(staticcall(gas(), 0x6, 0x6860, 0x80, 0x6860, 0x40), 1), success)
mstore(0x68e0, 0x251aa1c8c0d3b91c851bd0d6d4984ee6165f11dc52a32f0504f34d1d4e297847)
                    mstore(0x6900, 0x0b761c3e05536f3da20ed7755be08a51edde74023e4ca77a26d1a29c5d162641)
mstore(0x6920, mload(0x5460))
success := and(eq(staticcall(gas(), 0x7, 0x68e0, 0x60, 0x68e0, 0x40), 1), success)
mstore(0x6940, mload(0x6860))
                    mstore(0x6960, mload(0x6880))
mstore(0x6980, mload(0x68e0))
                    mstore(0x69a0, mload(0x6900))
success := and(eq(staticcall(gas(), 0x6, 0x6940, 0x80, 0x6940, 0x40), 1), success)
mstore(0x69c0, 0x10500c835287ade1b2b36fec4b0f5a119e5219635d2209134359075188b584cd)
                    mstore(0x69e0, 0x2f9b4981b897224adf1030c1529ecc2b9c436bf05fd7c229644c401d2a6c3a8a)
mstore(0x6a00, mload(0x5480))
success := and(eq(staticcall(gas(), 0x7, 0x69c0, 0x60, 0x69c0, 0x40), 1), success)
mstore(0x6a20, mload(0x6940))
                    mstore(0x6a40, mload(0x6960))
mstore(0x6a60, mload(0x69c0))
                    mstore(0x6a80, mload(0x69e0))
success := and(eq(staticcall(gas(), 0x6, 0x6a20, 0x80, 0x6a20, 0x40), 1), success)
mstore(0x6aa0, 0x09a8af5221bfb29bfce5db3013de2aeee98b85aced568cc9ec0cff80f26ee59a)
                    mstore(0x6ac0, 0x04c580f285af8e69880072693d91e55a8c49da269b24de12bcd51481b6a7321c)
mstore(0x6ae0, mload(0x54a0))
success := and(eq(staticcall(gas(), 0x7, 0x6aa0, 0x60, 0x6aa0, 0x40), 1), success)
mstore(0x6b00, mload(0x6a20))
                    mstore(0x6b20, mload(0x6a40))
mstore(0x6b40, mload(0x6aa0))
                    mstore(0x6b60, mload(0x6ac0))
success := and(eq(staticcall(gas(), 0x6, 0x6b00, 0x80, 0x6b00, 0x40), 1), success)
mstore(0x6b80, 0x02ba7ee32506bd134e3847a1b3e70e16f703a71b53c5c21b263272824148e46d)
                    mstore(0x6ba0, 0x11b8a259bc8677a5b5fd3dc5dda9c334de9e226a70e5965dc43c430dd2e9f14c)
mstore(0x6bc0, mload(0x54c0))
success := and(eq(staticcall(gas(), 0x7, 0x6b80, 0x60, 0x6b80, 0x40), 1), success)
mstore(0x6be0, mload(0x6b00))
                    mstore(0x6c00, mload(0x6b20))
mstore(0x6c20, mload(0x6b80))
                    mstore(0x6c40, mload(0x6ba0))
success := and(eq(staticcall(gas(), 0x6, 0x6be0, 0x80, 0x6be0, 0x40), 1), success)
mstore(0x6c60, 0x1b70d412eafd2575a0fabc1a34e8f800307a2a974cefa11d3f215afb654c3cd5)
                    mstore(0x6c80, 0x1f3a531ad9ccb2e56a0805231431a7a24e4c2d032d598acb9342fb41c2967853)
mstore(0x6ca0, mload(0x54e0))
success := and(eq(staticcall(gas(), 0x7, 0x6c60, 0x60, 0x6c60, 0x40), 1), success)
mstore(0x6cc0, mload(0x6be0))
                    mstore(0x6ce0, mload(0x6c00))
mstore(0x6d00, mload(0x6c60))
                    mstore(0x6d20, mload(0x6c80))
success := and(eq(staticcall(gas(), 0x6, 0x6cc0, 0x80, 0x6cc0, 0x40), 1), success)
mstore(0x6d40, 0x10d66e374767c959313078647eb901309c907572efaf9887d049e4a5ef17c505)
                    mstore(0x6d60, 0x0eed57d443694c7641328dd5a31a224f414f00c3b0a81e4a7286b68d8b335e38)
mstore(0x6d80, mload(0x5500))
success := and(eq(staticcall(gas(), 0x7, 0x6d40, 0x60, 0x6d40, 0x40), 1), success)
mstore(0x6da0, mload(0x6cc0))
                    mstore(0x6dc0, mload(0x6ce0))
mstore(0x6de0, mload(0x6d40))
                    mstore(0x6e00, mload(0x6d60))
success := and(eq(staticcall(gas(), 0x6, 0x6da0, 0x80, 0x6da0, 0x40), 1), success)
mstore(0x6e20, 0x0c1824efd938f810b1ec9b455b6fce7dedf96e18bad57241de1b35d820285f32)
                    mstore(0x6e40, 0x23b2fdeaeeebb400d3f1dcee64d7296403672cf36ee453e82c3d5d90acdc739a)
mstore(0x6e60, mload(0x5520))
success := and(eq(staticcall(gas(), 0x7, 0x6e20, 0x60, 0x6e20, 0x40), 1), success)
mstore(0x6e80, mload(0x6da0))
                    mstore(0x6ea0, mload(0x6dc0))
mstore(0x6ec0, mload(0x6e20))
                    mstore(0x6ee0, mload(0x6e40))
success := and(eq(staticcall(gas(), 0x6, 0x6e80, 0x80, 0x6e80, 0x40), 1), success)
mstore(0x6f00, 0x0ec6d72e2ce7c233ca8af2fc2bd4223a6d81d545e8785579de4cb241740f36a2)
                    mstore(0x6f20, 0x028a4450999577e25fc7d191fecf7f1a8a0526f7e042f316767c7ff43299fdd9)
mstore(0x6f40, mload(0x5540))
success := and(eq(staticcall(gas(), 0x7, 0x6f00, 0x60, 0x6f00, 0x40), 1), success)
mstore(0x6f60, mload(0x6e80))
                    mstore(0x6f80, mload(0x6ea0))
mstore(0x6fa0, mload(0x6f00))
                    mstore(0x6fc0, mload(0x6f20))
success := and(eq(staticcall(gas(), 0x6, 0x6f60, 0x80, 0x6f60, 0x40), 1), success)
mstore(0x6fe0, 0x26d8b7b13f52340b2e122f12d279deccb9cec2319ec4371d28ef1455e8acce48)
                    mstore(0x7000, 0x0b69e5f1edd7a5ebb8b3d29122b6b2ae59dc5cc3fcc18a672cd2bad60357db4f)
mstore(0x7020, mload(0x5560))
success := and(eq(staticcall(gas(), 0x7, 0x6fe0, 0x60, 0x6fe0, 0x40), 1), success)
mstore(0x7040, mload(0x6f60))
                    mstore(0x7060, mload(0x6f80))
mstore(0x7080, mload(0x6fe0))
                    mstore(0x70a0, mload(0x7000))
success := and(eq(staticcall(gas(), 0x6, 0x7040, 0x80, 0x7040, 0x40), 1), success)
mstore(0x70c0, mload(0x440))
                    mstore(0x70e0, mload(0x460))
mstore(0x7100, mload(0x5580))
success := and(eq(staticcall(gas(), 0x7, 0x70c0, 0x60, 0x70c0, 0x40), 1), success)
mstore(0x7120, mload(0x7040))
                    mstore(0x7140, mload(0x7060))
mstore(0x7160, mload(0x70c0))
                    mstore(0x7180, mload(0x70e0))
success := and(eq(staticcall(gas(), 0x6, 0x7120, 0x80, 0x7120, 0x40), 1), success)
mstore(0x71a0, mload(0x480))
                    mstore(0x71c0, mload(0x4a0))
mstore(0x71e0, mload(0x55a0))
success := and(eq(staticcall(gas(), 0x7, 0x71a0, 0x60, 0x71a0, 0x40), 1), success)
mstore(0x7200, mload(0x7120))
                    mstore(0x7220, mload(0x7140))
mstore(0x7240, mload(0x71a0))
                    mstore(0x7260, mload(0x71c0))
success := and(eq(staticcall(gas(), 0x6, 0x7200, 0x80, 0x7200, 0x40), 1), success)
mstore(0x7280, mload(0x4c0))
                    mstore(0x72a0, mload(0x4e0))
mstore(0x72c0, mload(0x55c0))
success := and(eq(staticcall(gas(), 0x7, 0x7280, 0x60, 0x7280, 0x40), 1), success)
mstore(0x72e0, mload(0x7200))
                    mstore(0x7300, mload(0x7220))
mstore(0x7320, mload(0x7280))
                    mstore(0x7340, mload(0x72a0))
success := and(eq(staticcall(gas(), 0x6, 0x72e0, 0x80, 0x72e0, 0x40), 1), success)
mstore(0x7360, mload(0x500))
                    mstore(0x7380, mload(0x520))
mstore(0x73a0, mload(0x55e0))
success := and(eq(staticcall(gas(), 0x7, 0x7360, 0x60, 0x7360, 0x40), 1), success)
mstore(0x73c0, mload(0x72e0))
                    mstore(0x73e0, mload(0x7300))
mstore(0x7400, mload(0x7360))
                    mstore(0x7420, mload(0x7380))
success := and(eq(staticcall(gas(), 0x6, 0x73c0, 0x80, 0x73c0, 0x40), 1), success)
mstore(0x7440, mload(0x540))
                    mstore(0x7460, mload(0x560))
mstore(0x7480, mload(0x5600))
success := and(eq(staticcall(gas(), 0x7, 0x7440, 0x60, 0x7440, 0x40), 1), success)
mstore(0x74a0, mload(0x73c0))
                    mstore(0x74c0, mload(0x73e0))
mstore(0x74e0, mload(0x7440))
                    mstore(0x7500, mload(0x7460))
success := and(eq(staticcall(gas(), 0x6, 0x74a0, 0x80, 0x74a0, 0x40), 1), success)
mstore(0x7520, mload(0x3a0))
                    mstore(0x7540, mload(0x3c0))
mstore(0x7560, mload(0x5620))
success := and(eq(staticcall(gas(), 0x7, 0x7520, 0x60, 0x7520, 0x40), 1), success)
mstore(0x7580, mload(0x74a0))
                    mstore(0x75a0, mload(0x74c0))
mstore(0x75c0, mload(0x7520))
                    mstore(0x75e0, mload(0x7540))
success := and(eq(staticcall(gas(), 0x6, 0x7580, 0x80, 0x7580, 0x40), 1), success)
mstore(0x7600, mload(0xc0))
                    mstore(0x7620, mload(0xe0))
mstore(0x7640, mload(0x5840))
success := and(eq(staticcall(gas(), 0x7, 0x7600, 0x60, 0x7600, 0x40), 1), success)
mstore(0x7660, mload(0x7580))
                    mstore(0x7680, mload(0x75a0))
mstore(0x76a0, mload(0x7600))
                    mstore(0x76c0, mload(0x7620))
success := and(eq(staticcall(gas(), 0x6, 0x7660, 0x80, 0x7660, 0x40), 1), success)
mstore(0x76e0, mload(0x100))
                    mstore(0x7700, mload(0x120))
mstore(0x7720, mload(0x5860))
success := and(eq(staticcall(gas(), 0x7, 0x76e0, 0x60, 0x76e0, 0x40), 1), success)
mstore(0x7740, mload(0x7660))
                    mstore(0x7760, mload(0x7680))
mstore(0x7780, mload(0x76e0))
                    mstore(0x77a0, mload(0x7700))
success := and(eq(staticcall(gas(), 0x6, 0x7740, 0x80, 0x7740, 0x40), 1), success)
mstore(0x77c0, mload(0x140))
                    mstore(0x77e0, mload(0x160))
mstore(0x7800, mload(0x5880))
success := and(eq(staticcall(gas(), 0x7, 0x77c0, 0x60, 0x77c0, 0x40), 1), success)
mstore(0x7820, mload(0x7740))
                    mstore(0x7840, mload(0x7760))
mstore(0x7860, mload(0x77c0))
                    mstore(0x7880, mload(0x77e0))
success := and(eq(staticcall(gas(), 0x6, 0x7820, 0x80, 0x7820, 0x40), 1), success)
mstore(0x78a0, mload(0x2e0))
                    mstore(0x78c0, mload(0x300))
mstore(0x78e0, mload(0x5a20))
success := and(eq(staticcall(gas(), 0x7, 0x78a0, 0x60, 0x78a0, 0x40), 1), success)
mstore(0x7900, mload(0x7820))
                    mstore(0x7920, mload(0x7840))
mstore(0x7940, mload(0x78a0))
                    mstore(0x7960, mload(0x78c0))
success := and(eq(staticcall(gas(), 0x6, 0x7900, 0x80, 0x7900, 0x40), 1), success)
mstore(0x7980, mload(0x320))
                    mstore(0x79a0, mload(0x340))
mstore(0x79c0, mload(0x5a40))
success := and(eq(staticcall(gas(), 0x7, 0x7980, 0x60, 0x7980, 0x40), 1), success)
mstore(0x79e0, mload(0x7900))
                    mstore(0x7a00, mload(0x7920))
mstore(0x7a20, mload(0x7980))
                    mstore(0x7a40, mload(0x79a0))
success := and(eq(staticcall(gas(), 0x6, 0x79e0, 0x80, 0x79e0, 0x40), 1), success)
mstore(0x7a60, mload(0x360))
                    mstore(0x7a80, mload(0x380))
mstore(0x7aa0, mload(0x5b40))
success := and(eq(staticcall(gas(), 0x7, 0x7a60, 0x60, 0x7a60, 0x40), 1), success)
mstore(0x7ac0, mload(0x79e0))
                    mstore(0x7ae0, mload(0x7a00))
mstore(0x7b00, mload(0x7a60))
                    mstore(0x7b20, mload(0x7a80))
success := and(eq(staticcall(gas(), 0x6, 0x7ac0, 0x80, 0x7ac0, 0x40), 1), success)
mstore(0x7b40, mload(0xbe0))
                    mstore(0x7b60, mload(0xc00))
mstore(0x7b80, sub(f_q, mload(0x5b80)))
success := and(eq(staticcall(gas(), 0x7, 0x7b40, 0x60, 0x7b40, 0x40), 1), success)
mstore(0x7ba0, mload(0x7ac0))
                    mstore(0x7bc0, mload(0x7ae0))
mstore(0x7be0, mload(0x7b40))
                    mstore(0x7c00, mload(0x7b60))
success := and(eq(staticcall(gas(), 0x6, 0x7ba0, 0x80, 0x7ba0, 0x40), 1), success)
mstore(0x7c20, mload(0xc80))
                    mstore(0x7c40, mload(0xca0))
mstore(0x7c60, mload(0x5ba0))
success := and(eq(staticcall(gas(), 0x7, 0x7c20, 0x60, 0x7c20, 0x40), 1), success)
mstore(0x7c80, mload(0x7ba0))
                    mstore(0x7ca0, mload(0x7bc0))
mstore(0x7cc0, mload(0x7c20))
                    mstore(0x7ce0, mload(0x7c40))
success := and(eq(staticcall(gas(), 0x6, 0x7c80, 0x80, 0x7c80, 0x40), 1), success)
mstore(0x7d00, mload(0x7c80))
                    mstore(0x7d20, mload(0x7ca0))
mstore(0x7d40, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(0x7d60, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(0x7d80, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(0x7da0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(0x7dc0, mload(0xc80))
                    mstore(0x7de0, mload(0xca0))
mstore(0x7e00, 0x0181624e80f3d6ae28df7e01eaeab1c0e919877a3b8a6b7fbc69a6817d596ea2)
            mstore(0x7e20, 0x1783d30dcb12d259bb89098addf6280fa4b653be7a152542a28f7b926e27e648)
            mstore(0x7e40, 0x00ae44489d41a0d179e2dfdc03bddd883b7109f8b6ae316a59e815c1a6b35304)
            mstore(0x7e60, 0x0b2147ab62a386bd63e6de1522109b8c9588ab466f5aadfde8c41ca3749423ee)
success := and(eq(staticcall(gas(), 0x8, 0x7d00, 0x180, 0x7d00, 0x20), 1), success)
success := and(eq(mload(0x7d00), 1), success)

            if not(success) { revert(0, 0) }
            return(0, 0)

                }
            }
        }